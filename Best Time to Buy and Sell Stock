Brute Force
TC->O(N*N)
SC->O(1)
SC->O(1)
int maxProfit(vector<int>& prices) 
{
        if(prices.size()==1)
        {
            return 0;
        }
        int res;
        int max;
        for(int i=0;i<prices.size()-1;i++)
        {
            for(int j=i+1;j<prices.size();j++)
            {
                res=prices[j]-prices[i];
                if(prices[j]>prices[i] && res>max)
                {
                    max=res;
                }
            }
         }
         return max;
}         
            

Optimized Approach
TC->O(N)
SC->O(1)
int maxProfit(vector<int>& prices) 
{
        if(prices.size()==1)
        {
            return 0;
        }
        int max=prices[1];
        int min=prices[0];
        int res=max-min;
        int count=0;
        for(int i=1;i<=prices.size()-1;i++)
        {
            
            if(min>prices[i])
            {
                min=prices[i];
                max=0;
            }
            if(max<prices[i] && prices[i]-min>res)
            {
                max=prices[i];
                res=max-min;
            }
            if(prices[i]<prices[i-1])
            {
                count=count+1;
            }
            
        }
        
            
        if(count==prices.size()-1)
        {
            return 0;
        }
        
            
        return res;
        
        
        
    }

//Brute
//Tc->O(N^2)
//Sc->O(1)
int max1(int n,vector<int>& height)
    {
        int maxi=0;
        for(int i=0;i<n;i++)
        {
            maxi=max(height[i],maxi);
        }
        return maxi;
    }
    int max2(int n,vector<int>& height)
    {
        int maxi=0;
        for(int i=height.size()-1;i>n;i--)
        {
            maxi=max(maxi,height[i]);
        }
        return maxi;
    }    
    int trap(vector<int>& height) 
    {
        int n=height.size();
        int res=0;
        for(int i=0;i<n;i++)
        {
            int l=max1(i,height);
            int r=max2(i,height);
            int mini=min(l,r);
            if(height[i]<mini)
            res=res+mini-height[i];
            
        }
      return res;
    }*/ 
    //Better
    //Tc->O(N)+O(N)+O(N)
    //Sc->O(N)+O(N)
    /*int trap(vector<int>& height) 
    {
        int n=height.size();
        vector<int> pre(n);
        vector<int> suff(n);
        int maxi1=0;
        int maxi2=0;
        int mini=0;
        int res=0;
        for(int i=0;i<n;i++)
        {
            maxi1=max(maxi1,height[i]);
            pre[i]=(maxi1);
        }
        for(int i=n-1;i>=0;i--)
        {
            maxi2=max(maxi2,height[i]);
            suff[i]=maxi2;
        }
        for(int i=0;i<n;i++)
        {
            mini=min(pre[i],suff[i]);
            if(mini>height[i])
            res=res+mini-height[i]; 
        }
        return res;
    }*/
    //OPtimized
    //Tc->O(N)
    //Sc->O(1)
    int trap(vector<int>& height)
    {
        int n=height.size();
        int l=0;
        int leftmax=0;
        int r=n-1;
        int rightmax=0;
        int res=0;
        while(r>l)
        {
            if(height[l]<=height[r])
            {
                if(height[l]>leftmax)
                leftmax=height[l];
                else
                {
                    res=res+(leftmax-height[l]);
                }
                l++;
            }
            else
            {
                if(height[r]>rightmax)
                rightmax=height[r];
                else
                {
                    res=res+(rightmax-height[r]);
                }
                r--;
            }
        }
        
        return res;
    }

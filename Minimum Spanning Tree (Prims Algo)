
int spanningTree(int n, vector<vector<int>> adj[])
    {
        // code here
        vector<int>key(n,INT_MAX);
        vector<int>par(n);
        par[0]=0;
        vector<bool>mst(n,false);
        key[0]=0;
        int sum=0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,0});
        while(!pq.empty())
        {
            auto it=pq.top();
            pq.pop();
            int dis=it.first;
            int node=it.second;
            mst[node]=true;
            for(auto  it2:adj[node])
            {
                int node2=it2[0];
                int edge=it2[1];
                if(mst[node2]==false && key[node2]>edge)
                {
                    key[node2]=edge;
                    par[node2]=node;
                    pq.push({edge,node2});
                    
                }
            }
        }
        for(int i=0;i<key.size();i++)
        sum+=key[i];
        return sum;
    }

//Brute Force
//TC->O(NlogN)+O(N*N)
//SC->O(N*N)
/*vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        
        int len=intervals.size();
        if(len<=1)
            return intervals;
        sort(intervals.begin(),intervals.end()); 
        vector<vector<int>> res;
        for(int i=0;i<len;i++)
        {
            int a=intervals[i][0];
            int b=intervals[i][1];
            for(int j=i+1;j<len;j++)
            {
                int c=intervals[j][0];
                int d=intervals[j][1];
                if(b>=c)
                { 
                    b=max(b,d);
                    i=j;
                }
            } 
            res.push_back({a,b});
        }
        return res;
    }*/
//Optimized Approach
//TC->O(NlogN)+O(N)
//SC->O(N)

    /*vector<vector<int>> merge(vector<vector<int>>& intervals) 
    {
        vector<vector<int>> ans;
        if(intervals.size()==0)
        return ans;
        sort(intervals.begin(),intervals.end());
        vector<int> check;
        check.push_back(intervals[0][0]);
        check.push_back(intervals[0][1]);
        for(auto it:intervals)
        {
            if(it[0]<=check[1])
            {
                check[1]=max(it[1],check[1]);
            }
            else
            {
                ans.push_back(check);
                check=it;
            }
        }
        ans.push_back(check);
        return ans;
   
        
    }*/

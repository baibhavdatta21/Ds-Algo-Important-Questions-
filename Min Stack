//Brute
//TC->O(N)
//SC->O(N)+O(N)
class MinStack {
public:
    MinStack()
    {}
    stack<pair<int,int>> st;
    void push(int val) 
    {
        if(st.empty())
        {
            st.push({val,val});
        }
        else
        {
            auto it=st.top();
            st.push({val,min(it.second,val)});
        }
        
    }
    
    void pop() 
    {
        st.pop();
    }
    
    int top() 
    {
        auto it =st.top();
        return it.first;
    }
    
    int getMin() 
    {
        auto it =st.top();
        return it.second;
    }*/
    
   //Better
  //TC->O(N)
  //SC->O(N)

class MinStack {
    stack<long long> st; 
    long long mini; 
public:
    /** initialize your data structure here. */
    MinStack() {
        while(st.empty() == false) st.pop(); 
        mini = INT_MAX; 
    }
    
    void push(int value) {
        long long val = value; 
        if(st.empty()) {
            mini = val; 
            st.push(val); 
        }
        else {
            if(val < mini) {
                st.push(2 * val - mini);
                mini = val; 
            }
            else {
                st.push(val); 
            }
        }
    }
    
    void pop() {
        if(st.empty()) return; 
        long long el = st.top(); 
        st.pop(); 
        
        if(el < mini) {
            mini = 2 * mini - el; 
        }
    }
    
    int top() {
        if(st.empty()) return -1; 
        
        long long el = st.top(); 
        if(el < mini) return mini; 
        return el; 
    }
    
    int getMin() {
        return mini; 
    }
};

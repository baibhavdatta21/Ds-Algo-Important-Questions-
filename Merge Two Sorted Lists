//Brute
//TC->O(N+N)
//SC->O(N+N)
ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        ListNode* res=new ListNode();
        ListNode* list=res;
        
        
        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val>=list2->val)
            {
                list->next=list2;
                list=list->next;
                list2=list2->next;
            }
            else if (list1->val < list2->val)
            {
                list->next=list1;
                list=list->next;
                list1=list1->next;
            }
            
        }
        if(list1!=NULL)
        {
            list->next=list1;
            list=list->next;
            list1=list1->next;
        }
        if(list2!=NULL)
        {
            list->next=list2;
            list=list->next;
            list2=list2->next;
        }
        return res->next;
        
    }*/
    
    //Optimized 
    //TC->O(N+N)
    //O(1)
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if(list1==NULL)
        return list2;
        if(list2==NULL)
        return list1;
        ListNode* temp=NULL;
        ListNode* l2=list2;
        ListNode* l1=list1;

        if(l1->val>l2->val)
        {
           swap(l1,l2);
        }
        ListNode* res=l1;
   
        
        while(l1!=NULL && l2!=NULL)
            
        {
            ListNode* temp=NULL;
            while(l1!=NULL && l1->val<=l2->val)
            {
                temp=l1;
                l1=l1->next;
            }
            temp->next=l2;
            swap(l1,l2);
        }
        return res;
    }

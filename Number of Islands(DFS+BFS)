
//DFS 
//TC->O(N*M)
//SC->O(N*M)
void solver(int i,int j,vector<vector<char>>& grid)
    {
        
        
        if(i>=0 && j>=0 && i<grid.size() && j<grid[0].size() && grid[i][j]=='1')
        {
            grid[i][j]='0';
            solver(i+1,j,grid);
            solver(i-1,j,grid);
            solver(i,j+1,grid);
            solver(i,j-1,grid);
        }
        
    }
    int numIslands(vector<vector<char>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    count++;
                    solver(i,j,grid);
                }
            }
        }
        return count;
    }
    
//BFS 
//TC->O(N*M)
//SC->O(N*M)
int numIslands(vector<vector<char>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        int count=0;
        int dx[4]={1,-1,0,0};
        int dy[4]={0,0,-1,1};
        queue<pair<int,int>>q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]=='1')
                {
                    count++;
                    q.push({i,j});
                    grid[i][j]='0';
                    while(!q.empty())
                    {
                        auto it=q.front();
                        q.pop();
                        int x=it.first;
                        int y=it.second;
                        for(int i=0;i<4;i++)
                        {
                            if(x+dx[i]>=0 && y+dy[i]>=0 && x+dx[i]<grid.size() && y+dy[i]<grid[0].size() && grid[x+dx[i]][y+dy[i]]=='1') 
                            {
                                q.push({x+dx[i],y+dy[i]});
                                grid[x+dx[i]][y+dy[i]]='0';
                            }
                        }
                    }
               }
           }    
      }
        return count;
    }

//Brute
//Tc->O(N)
//Sc->O(1)

int singleNonDuplicate(vector<int>& nums)
    {
        int x=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            x=x^nums[i];
        }
        return x;
    }*/
    //By optimized binary search
    //Tc->O(logn)
    //Sc->O(1)
    /*int singleNonDuplicate(vector<int>& nums)
    {
        if(nums.size()==1)
        return nums[0];
        
        int low=0;
        int high=nums.size()-2;
        while(high>=low)
        {
            int mid=(high+low)/2;
            
            if(mid%2==0)
            {
                if(nums[mid]==nums[mid+1])
                {
                    low=mid+1;
                }
                else
                {
                     high=mid-1;
                }
            }
            else
            {
                if(nums[mid]!=nums[mid+1])
                {
                    low=mid+1;
                }
                else
                {
                    high=mid-1;
                }
            }

        }
        return nums[low];
        
    }*/
     //By optimized binary search and more optimization with xor
    //Tc->O(logn)
    //Sc->O(1)
    int singleNonDuplicate(vector<int>& nums)
    {
        
        if(nums.size()==1)
        return nums[0];
        
        int low=0;
        int high=nums.size()-2;
        while(high>=low)
        {
            int mid=(high+low)/2;
            if(nums[mid]==nums[mid^1])
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }   
        return nums[low];
    }
        
};

//Brute Force
//TC->O(N*N)
int reversePairs(vector<int>& nums) 
    {
        int count=0;
        int mod=1e9+7;
        for(int i=0;i<nums.size()-1;i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if((nums[i])/2.0 > nums[j])
                count=count+1;
            }
        }
        return count;
       //Optimized
       //TC->O(nlogn)+O(n)+O(n)
        int merge(vector<int>& nums,int l,int mid,int h)
    {
        int total = 0;
        int q = mid + 1;
        for (int i = l; i <= mid; i++) 
        {
            while (q <= h && nums[i]/2.0 > nums[q]) 
            {
                 q++;
            }
            total += (q - (mid + 1));
        }

        int n1=mid-l+1;
        int n2=h-mid;
        vector<int>a(n1);
        vector<int>b(n2);
       
        
        for(int i=0;i<n1;i++)
        {
            a[i]=nums[i+l];
        }
        for(int i=0;i<n2;i++)
        {
            b[i]=nums[i+mid+1];
        }
        
        
        int i=0;
        int j=0;
        int k=l;
        while(i<n1 && j<n2)
        {
            if(a[i]<b[j])
            {
                nums[k]=a[i];
                i++;
            }
            else
            {
                nums[k]=b[j];
                j++;
            }
            k++;
        }
        while(i<n1)
        {
            nums[k]=a[i];
            i++;
            k++;
        }
        while(j<n2)
        {
            nums[k]=b[j];
            j++;
            k++;
        }
        return total;
    }
    int mergesort(vector<int>& nums,int l,int h)
    {
        if(l>=h)
        return 0;
        else
        {
            int mid=(l+h)/2;
            int count=mergesort(nums,l,mid);
            count=count+mergesort(nums,mid+1,h);
            count=count+merge(nums,l,mid,h);
            return count;
        }
    }
    int reversePairs(vector<int>& nums)
    {
        return mergesort(nums,0,nums.size()-1);
    }

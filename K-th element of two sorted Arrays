//Brute
//TC->O(N+M)
//SC->)(N+M)
int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        int i=0;
        int j=0;
        int f=0;
        
        int ans[n+m];
        
        while(i<n && j<m)
        {
            if(arr1[i]<=arr2[j])
            {
                ans[f]=arr1[i];
                i++;
                f++;
            }
            else
            {
                ans[f]=arr2[j];
                j++;
                f++;
            }
        }
        while(i<n)
        {
            ans[f]=arr1[i];
            f++;
            i++;
        }
        while(j<m)
        {
            ans[f]=arr2[j];
            f++;
            j++;
        }
        return ans[k-1];
    }
    
    //Optimized
    //TC->O(log(min(n,m))
    //SC->)(1)
    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(n>m)
        return kthElement(arr2,arr1, m,n,k);
        
        int low=max(0,k-m);
        int high=min(k,n);
        while(high>=low)
        {
            int cut1=(low+high)/2;
            int cut2=k-cut1;
            
            int l1,l2,r1,r2;
            if(cut1==0)
            l1=INT_MIN;
            else
            l1=arr1[cut1-1];
            
            if(cut2==0)
            l2=INT_MIN;
            else
            l2=arr2[cut2-1];
            
            if(cut1==n)
            r1=INT_MAX;
            else
            r1=arr1[cut1];
            
            if(cut2==m)
            r2=INT_MAX;
            else
            r2=arr2[cut2];
            
            if(l1<=r2 && l2<=r1)
            {
                return max(l1,l2);
            }
            else if(l1>r2)
            {
                high=cut1-1;
            }
            else
            {
                low=cut1+1;
            }
        }
        return -1;
    }

//Brute
//TC->O(N*N)

bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(matrix[i][j]==target)
                return true;
            }
        }
        return false;
    }*/
    //slightly better
    //Tc->O(N*N)
    /*bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        //int l=0,h=matrix.size()-1;
        int flag=0;
        for(int i=0;i<matrix.size();i++)
        {   
            if(matrix[i][0]<=target && target<=matrix[i][matrix[0].size()-1])
            {
                for(int j=0;j<matrix[0].size();j++)
                {
                    flag=1;
                    if(matrix[i][j]==target)
                    {
                        return true;
                    }
                }
                if(flag==1)
                break;
            }
        }
        return false;
    }*/
    
     //Better
    /*bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        int i=0;
        int j=matrix[0].size()-1;
        while(i<matrix.size() && j>=0)
        {
            if(matrix[i][j]==target)
            return true;
            else if(matrix[i][j]>target)
            {
                j--;
            }
            else if(matrix[i][j]<target)
            {
                i++;
            }
            
        }
        return false;
    }*/
    
    //Optimized
    //TC->O(log(N*M)
    bool searchMatrix(vector<vector<int>>& matrix, int target)
    {
        if(matrix.size()==0)
        return false; 
        int n=matrix.size();
        int m=matrix[0].size();
        int l=0;
        int h=(n*m)-1;
        
        while(h>=l)
        {
            int mid=(l+(h-l)/2);
            
            if(matrix[mid/m][mid%m]==target)
            return true;
            else if(matrix[mid/m][mid%m]<target)
            {
                l=mid+1;
            }
            else if(matrix[mid/m][mid%m]>target)
            {
                h=mid-1;
            }
        }
        return false;
        
        

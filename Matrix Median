//brute
//Tc->O(n*m)
//Sc->O(n)

int Solution::findMedian(vector<vector<int> > &A) 
{
    int n=A.size();
    int m=A[0].size();
    vector<int> v;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        { 
            v.push_back(A[i][j]);
        }
    }
    sort(v.begin(),v.end());
    int x=v.size();
    int num=(x/2);
    return v[num];
}*/
//optimized
//Tc->O(log2^32)Nlog(m)
//Sc->O(1)
int count_smaller_than_or_equal_to(vector<int> row, int mid)
{
    int l=0;
    int h=row.size()-1;
    while(l<=h)
    {
        int md=(l+h)/2;

        if(row[md]<=mid)
        l=md+1;
        else
        h=md-1;
    }
    return l;
}
int Solution::findMedian(vector<vector<int> > &A) 
{
    int n=A.size(); //size of rows
    int m=A[0].size(); //size of columns
    int low= 1; //initializing low to 1
    int high= INT_MAX; //initializing high to a very large number
    while(high>=low) //as soon as low increases we stop
    {
        int mid=(high+low)/2; //tacking the mid
        int count=0;//initializing the counter
        for(int i=0;i<n;i++) //looping for each rows
        {
            count=count + count_smaller_than_or_equal_to(A[i],mid);//number of them smaller than our number 
        }
        if(count<=(n*m)/2) //if count is less than what we want
        low=mid+1;
        else //if count is greater than what we want
        high=mid-1;
    }
    return low;

}


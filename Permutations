//Recursion
//Brute
//Tc->O(n!*n)
//Sc->O(n)+O(n)+O(N*N)+O(N)
void solver(vector<int>& nums,vector<int> dummy,vector<vector<int>> &ans, unordered_map<int,int>mp)
    {
        if(dummy.size()==nums.size())
        {
            ans.push_back(dummy);
            return;
        }
        for(int i=0;i<nums.size();i++)
        {
            if(mp[nums[i]]==0)
            {
                dummy.push_back(nums[i]);
                mp[nums[i]]=1;
                solver(nums,dummy,ans,mp);
                dummy.pop_back();
                mp[nums[i]]=0;
           
            }
            
        }

    }
   
     vector<vector<int>> permute(vector<int>& nums) 
    {
        unordered_map<int,int>mp;
        vector<int> dummy;
        vector<vector<int>> ans;
        solver(nums,dummy,ans,mp);
        return ans;
    }*/
    //Recursion
    //Optimimzed
    //Tc->O(n!*n)
    //Sc->O(N*N)+O(N)

    void solver(int index,vector<int>& nums, vector<vector<int>> &ans)
    {
        if(index==nums.size())
        {
            ans.push_back(nums);
            return;
        }   
         
        
        for(int i=index;i<nums.size();i++)
        {
            swap(nums[i],nums[index]);
            solver(index+1,nums,ans);
            swap(nums[i],nums[index]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) 
    {
        vector<vector<int>> ans;
        solver(0,nums,ans);
        return ans;
    }

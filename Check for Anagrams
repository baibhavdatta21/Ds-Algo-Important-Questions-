//Brute
//Tc->O(NlogN)
//SC->O(1)
/*bool isAnagram(string s, string t)
    {
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        int n=s.size();
        int m=t.size();
        if(n!=m)
        return false;
        for(int i=0;i<n;i++)
        {
            if(s[i]!=t[i])
            return false;
        }
        return true;
    }
    */
    //Better
    //Tc->O(N)
    //SC->O(N)
    /*bool isAnagram(string s, string t)
    {
        
        int n=s.size();
        int m=t.size();
        map<char,int>mp;
        if(n!=m)
        return false;
        
        for(int i=0;i<n;i++)
        {   
           mp[s[i]]++;
        }
        //int k=se.size();
        //cout<<se.size();
        for(int i=0;i<n;i++)
        {   
           mp[t[i]]--;
        }
        for(auto it:mp)
        {
            if(it.second!=0)
            return false;
        }
        return true;
        
    }*/
    //Optimized
    //Tc->O(N)
    //SC->O(1)

    bool isAnagram(string s, string t)
    {
        vector<int>v(26,0);
        int n=s.size();
        int m=t.size();
        if(n!=m)
        return false;
        for(int i=0;i<n;i++)
        {
            v[s[i]-'a']++;
        }
        for(int i=0;i<n;i++)
        {
            v[t[i]-'a']--;
        }
        for(int i=0;i<26;i++)
        {
            if(v[i]!=0)
            return false;
        }
        return true;
        
    }

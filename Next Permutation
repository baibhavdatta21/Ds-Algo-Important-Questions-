Brute Force
TC->O(N!*N)
SC->(N*N)

 void permute(int p,vector<int>& arr, vector<vector<int>>& res) 
 {
        int n=arr.size();
        if(p==n) 
        res.push_back(arr);
        for(int i=p;i<n;i++) 
        {
            swap(arr[i],arr[p]);
            permute(p+1,arr,res);
            swap(arr[i],arr[p]);
        }
    }
    void nextPermutation(vector<int>& nums) 
    {
        vector<vector<int>> res; 
        vector<int> arr=nums; 
        permute(0,arr,res); 
        set<vector<int>> s;
        for(int i=0;i<res.size();i++)
        {
            s.insert(res[i]);
        }
        auto it=s.find(nums);
        if(it==(--s.end()))
        {
            it=s.begin();
            nums=*it;
        }
        else{
            it++;
            nums=*it;
        }
    }
   
 //Optimized Approach(with a stl)
 //TC->O(N) 
 //SC->O(1)
 void nextPermutation(vector<int>& nums) 
 {
      next_permutation(nums.begin(),nums.end();
  }
  
  //Opttmized approach(without stl)
  //TC->O(N)
  //SC->O(1)
  
   void nextPermutation(vector<int>& nums) 
    {
        int len = nums.size(),i,j;
    
        for(i=len-2;i>=0;i--)
        {
            if(nums[i]<nums[i+1]) 
            break;
        }
        if(i<0)
        {
             reverse(nums.begin(),nums.end());
        }
        else
        {

            for(j=len-1;j>i;j--)
            {
                if(nums[j]>nums[i]) 
                break;
            }
            swap(nums[j],nums[i]);
            reverse(nums.begin()+i+1,nums.end());
        }
    }
       

//Brute
//TC->O(N)
//SC->O(N)+O(N)

void solver(TreeNode* root, vector<int>&in)
    {
        if(root==NULL)
        return;
        
        solver(root->left,in);
        in.push_back(root->val);
        solver(root->right,in);
    }
    int kthSmallest(TreeNode* root, int k)
    {
        vector<int>in;
        solver(root,in);
        return in[k-1];
    }*/
    
//Better
 //TC->O(N)
//SC->O(N)
int ans;
void solver(TreeNode* root, int &count,int k)
    {
        if(root==NULL)
        return;
        solver(root->left,count,k);
    
        
        count++;
        if(k==count)
        {
            ans=root->val;
            return;
        }   
        
        solver(root->right,count,k);
        

        
    }
    int kthSmallest(TreeNode* root, int k)
    {
        int u=0;
        solver(root,u,k);
        return ans;
    }*/
    //Morrris traversal
    
    
//Optimized 
//TC->O(N)
//SC->O(1)
    int cnt = 0, ans;
void findInorder(TreeNode *root, int &k)
{
    if (root == NULL)
        return;
    findInorder(root->left, k);
    cnt++;
    if (cnt == k)
    {
        ans = root->val;
        return;
    }
    findInorder(root->right, k);
}
int kthSmallest(TreeNode *root, int k)
{
    findInorder(root, k);
    return ans;
}


int getInorder(TreeNode *root, int &k)
{
    int cnt = 0, ans;
    TreeNode *cur = root;
    while (cur)
    {
        if (cur->left == NULL) 
        {
            cnt++;
            if (cnt == k)
            {
                ans = cur->val;
            }
            cur = cur->right;
        }
        else
        {
            TreeNode *prev = cur->left;
            while (prev->right && prev->right != cur)
                prev = prev->right;

            if (prev->right == NULL)
            {
                prev->right = cur;
                cur = cur->left;
            }
            else
            {
                prev->right = NULL;
                cnt++;
                if (cnt == k)
                {
                    ans = cur->val;
                }
                cur = cur->right;
            }
        }
    }
    return ans;
}

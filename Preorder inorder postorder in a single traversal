//TC->O(3N)
//SC->O(N)
#include <bits/stdc++.h>

using namespace std;

struct node 
{
    int data;
    struct node * left, * right;
};

void allTraversal(node * root, vector < int > & pre, vector < int > & in , vector < int > & post) 
{
    if (root == NULL) 
    return;

    stack<pair<node*,int>> st;
    st.push({root,1});
    
   while(!st.empty())
   {
        auto it=st.top();
        node* dummy=it.first;
        int index=it.second;
        st.pop();

        if(index==1)
        {
            pre.push_back(dummy->data);
            index++;
            st.push({dummy,index});
            if(dummy->left!=NULL)
            {
                st.push({dummy->left,1});
            }
        }
        else if(index==2)
        {
            in.push_back(dummy->data);
            index++;
            st.push({dummy,index});
            if(dummy->right!=NULL)
            {
                st.push({dummy->right,1});
            }
        }
        else
        {
            post.push_back(dummy->data);
        }
   }
  
}

struct node * newNode(int data) 
{
    struct node * node = (struct node * ) malloc(sizeof(struct node));
    node -> data = data;
    node -> left = NULL;
    node -> right = NULL;

    return (node);
}

int main() 
{

    struct node * root = newNode(1);
    root -> left = newNode(2);
    root -> left -> left = newNode(3);
    root -> left -> left->right = newNode(5);
    root -> left ->left-> right -> left= newNode(6);
    root -> left -> left -> left= newNode(4);
    root -> right  = newNode(10);
    root -> right -> right = newNode(30);
    root -> right -> left = newNode(20);

    vector < int > pre, in , post;
    allTraversal(root, pre, in , post);

    cout << "The preorder Traversal is :  ";
    for (auto nodeVal: pre) {
    cout << nodeVal << " ";
    }
    cout << endl;
    cout << "The inorder Traversal is : ";
    for (auto nodeVal: in ) {
    cout << nodeVal << " ";
    }
    cout << endl;
    cout << "The postorder Traversal is : ";
    for (auto nodeVal: post) {
    cout << nodeVal << " ";
    }
    cout << endl;

  return 0;
}

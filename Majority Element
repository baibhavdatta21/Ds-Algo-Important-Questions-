//Brute force
//Tc->O(N*N)
//SC->O(1)
/*int majorityElement(vector<int>& nums)
    {
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            count=0;
            for(int j=0;j<nums.size();j++)
            {
                if(nums[i]==nums[j])
                {
                    count=count+1;
                    if(count>(nums.size())/2)
                    return nums[i];
                }
            }
        }
        return -1;
    }*/
    //Better
    TC->O(NlogN)+O(N)
    SC->O(1)
    /*int majorityElement(vector<int>& nums) 
    {
        if(nums.size()==1)
        return nums[0];
        sort(nums.begin(),nums.end());
        int count=1;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(nums[i]!=nums[i+1])
            {
                count=1;
            }
            else
            {
                count++;
                if(count>(nums.size()/2))
                return nums[i];
            }
        }
        return -1;
    }*/
    //EVEN Better
    //TC->O(N)+O(N)
    //SC->O(N)
    /*int majorityElement(vector<int>& nums)
    {
        map<int,int> mp;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
            
        }
        for(auto it:mp)
        {
            if(it.second>(nums.size()/2))
            return it.first;
        }
        return -1;
        
    }*/
    //Optimized
    //TC->O(N)
    //SC->O(1)
    /*int majorityElement(vector<int>& nums)
    {
        int count=0;
        int container=0;
        for(int i=0;i<nums.size();i++)
        {
            if(count==0)
            {
                count++;
                container=nums[i];
            }
            else if(container==nums[i])
            count++;
            else if(container!=nums[i])
            count--;    
        }
        return container;
    }*/

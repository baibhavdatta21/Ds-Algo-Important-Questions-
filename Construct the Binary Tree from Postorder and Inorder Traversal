 TreeNode* solver(vector<int>& inorder, int in_start,int in_end,vector<int>& postorder, int post_start, int post_end, map<int,int>&mp)
    {
        if(in_start>in_end || post_start>post_end)
        return NULL;
        
        TreeNode* root=new TreeNode(postorder[post_end]);
        int in_root=mp[root->val];
        int in_left=in_root-in_start;
        
        root->left =solver(inorder, in_start, in_root-1, postorder, post_start, post_start+in_left-1, mp);
        root->right=solver(inorder, in_root+1, in_end, postorder, post_start+in_left, post_end-1, mp);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) 
    {
        int n=inorder.size();
        int m=postorder.size();
        
        map<int,int> mp;
        for(int i=0;i<n;i++)
        mp[inorder[i]]=i;
        
        return solver(inorder,0,n-1,postorder,0,m-1,mp);
    }

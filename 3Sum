//brute
//TC->O(N*N*N)
//SC->O(N)
vector<vector<int>> threeSum(vector<int>& nums) 
    {
        if(nums.size()<3)
        return  vector<vector<int>>(); 
        
        vector<vector<int>> ans;
        set<vector<int>> s;
        vector<int> inter;
        int n=nums.size();
        int flag=0;
        for(int i=0;i<n-2;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                    //if(nums[i]!=nums[j] && nums[i]!=nums[k] && nums[])
                    if(nums[i]+nums[j]+nums[k]==0)
                    {
                        
                        inter.push_back (nums[i]);
                        inter.push_back (nums[j]);
                        inter.push_back (nums[k]);
                        
                    }
                      sort(inter.begin(),inter.end());
                      if (inter.size() != 0)
                      s.insert(inter);
                      inter.clear();                         
                }
            }
        }
        for(auto it:s)
        {
            ans.push_back(it);
            
        }
        return ans;
                                             
    }
    
    //better
    //TC->O(N*N*logn)
    //SC->O(N)
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        vector<vector<int>> triplets;
        if(nums.size()<3)    return triplets;
        sort(nums.begin(),nums.end());
        
        unordered_map<int,int> map;
        for(int i=0;i<nums.size();i++)  map[nums[i]] = i;
        
        for(int i = 0;i < nums.size()-2;i++)
        {
            if(nums[i] > 0) break;
            if(i > 0 && nums[i] == nums[i-1])   continue;
			
            for(int j = i+1;j < nums.size()-1;j++)
            {
                int target = -(nums[i]+nums[j]);
                if(map.count(target) && map.find(target)->second > j)
                {
                    triplets.push_back({nums[i],nums[j],target});
                }
                j = map.find(nums[j])->second;
            }
            i = map.find(nums[i])->second;
            
        }
        return triplets;
    }
    //brute
    //TC->O(N*N*N)
    //SC->O(N*N)
    /*vector<vector<int>> threeSum(vector<int>& nums)
    {
        int n=nums.size();
        set<vector<int>> s;
        vector<vector<int>> ans;
        
        sort(nums.begin(),nums.end());
        for(int i=0;i<n-2;i++)
        {
            int target=-nums[i];
            
            int front=i+1;
            int back=n-1;
            
            while(front<back)
            {
                int target2=nums[front]+nums[back];
                
                if(target>target2)
                {
                    front++;
                }
                else if(target<target2)
                {
                    back--;
                }
                else
                {
                    vector<int> inter;
                    inter.push_back(nums[i]);
                    inter.push_back(nums[front]);
                    inter.push_back(nums[back]);
                    sort(inter.begin(),inter.end());
                    s.insert(inter);
                    
                    
                    while(front<back && nums[front]==inter[1])
                    front++;
                    while(front<back && nums[back]==inter[2])
                    back--;
                    inter.clear();
                }
                
            }
            while(i < n-2 && nums[i + 1] == nums[i]) 
            ++i;
        }
        for(auto it:s)
        {
            ans.push_back(it);
        }
        return ans;
        
        
    }

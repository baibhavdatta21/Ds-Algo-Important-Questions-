//Brute Force
//TC->O(N*logN)
//SC->O(1)
void sortColors(vector<int>& nums) 
{
    sort(nums.begin(),nums.end());
}    
//Better Approach
//TC->O(N)+O(N)
//SC->O(1)
/*void sortColors(vector<int>& nums) 
    {
        int count0=0;
        int count1=0;
        int count2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                count0++;
            }
            else if(nums[i]==1)
            {
                count1++;
            }
            else if(nums[i]==2)
            {
                count2++;
            }

        }
        for(int i=0;i<nums.size();i++)
        {
            if(count0!=0)
            {
                nums[i]=0;
                count0--;
            }
            else if(count1!=0)
            {
                nums[i]=1;
                count1--;
            }
            else if(count2!=0)
            {
                nums[i]=2;
                count2--;
            }
        }
        
    }*/
    //Optimied Solution
    //TC->O(N)
    //SC->O(1)
    
    /*void sortColors(vector<int>& nums)
    {
        int low=0;
        int mid=0;
        int high=nums.size()-1;
        
        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums[low],nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid]==1)
            {
                mid++;
            }
            else if(nums[mid]==2)
            {
                swap(nums[mid],nums[high]);
                high--;
            }
        }
        
    }*/

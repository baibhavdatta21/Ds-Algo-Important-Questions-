//Brute Force
//TC->O(NlogN)+O(N)
//SC->O(1)
/*int findDuplicate(vector<int>& nums) 
    {
        int j;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-1;i++)
        {
            j=i+1;
            
            if(nums[i]==nums[j])
            return nums[i];
            
        }
        return -1;
            
    }*/
    
//Better Approach
//TC->O(N)
//SC->O(N)

    /*int findDuplicate(vector<int>& nums)
    {
        vector<bool> v(nums.size(),false);
        for(int i=0;i<nums.size();i++)
        {
            if(v[nums[i]]==false)
            {
                v[nums[i]]=true;
            }
            else
            {
                return nums[i];
            }
        }
        return -1;
    }*/
    
 //Optimized Approach
 //TC->O(N)
 //SC->O(1)
 
    /*int findDuplicate(vector<int>& nums)
    {
        int slow=nums[0];
        int fast=nums[0];
        
        do
        {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return fast;
    }*/

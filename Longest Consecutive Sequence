//Brute
//TC->O(nlogn)+O(N)
//Sc->O(1)
int longestConsecutive(vector<int>& nums) 
    {
        int count=1;
        int n=nums.size();
        if(n==0 || n==1)
        return n;
          
        int flag=0; 
        int maxi=1;
        sort(nums.begin(),nums.end());
        for(int i=0; i<n-1;i++)
        {
            if(nums[i]+1==nums[i+1])
            {
                if(flag==1)
                {
                    count++;
                    maxi=max(count,maxi);
                }  
            
                else
                {
                    count=2;
                    flag=1;
                }    
            }
            else if(nums[i]==nums[i+1])
            continue;    
            else
            flag=0;
        }
        return max(maxi,count);
    }*/
    
    //Optimized
    //Tc->O(3N)
    //SC->O(1)
    int longestConsecutive(vector<int>& nums)
    {
        unordered_set<int> s;
        int n=nums.size();
        int count=1;
        int max_count=0;
        for(int i=0;i<n;i++)
        {
            s.insert(nums[i]);
        }
        for(int i=0;i<n;i++)
        {
            if(s.find(nums[i]-1)!=s.end())
            continue;
            else if(s.find(nums[i]-1)==s.end())
            {
                int check=nums[i]+1;
                while(s.find(check)!=s.end())
                {
                    count++;
                    check++;
                }
                max_count=max(count,max_count);
                count=1;
            }
        }
        return max_count;
    }

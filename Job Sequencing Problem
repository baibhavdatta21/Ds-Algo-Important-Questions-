//optimized
//TC->O(NlogN)+O(N)+O(N*DEADLINES)
//SC->O(N)

static bool compare(Job a,Job b)
    {
        return a.profit>b.profit;
    }
   
   
   vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,compare);
        int count=0;
        int maxi=1;
        
        for(int i=0;i<n;i++)
        {
            maxi=max(arr[i].dead,maxi);
        }
        vector<int>v(maxi+1,-1);
        int sum=0;
        for(int i=0;i<n;i++)
        {
            for(int j=arr[i].dead;j>=1;j--)
            {
                if(v[j]==-1)
                {
                    sum=sum+arr[i].profit;
                    v[j]=0;
                    count++;
                    break;
                } 
                else 
                {
                    continue;
                }
            }
            
        }
        vector<int>ans;
        ans.push_back(count);
        ans.push_back(sum);
        return ans;
    }
